---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-signed-sbom
  labels:
    app.kubernetes.io/version: "0.7"
  annotations:
    tekton.dev/categories: SBOM
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: generate-signed-sbom
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
    tekton.dev/displayName: generate-signed-sbom
spec:
  description: >-
    Need New Description

  params:
  - name: IMAGE
    description: Reference of the image to build sboms.

  workspaces:
  - name: source

  stepTemplate:
    env:
      - name: "HOME"
        value: "/tekton/home"

  steps:

    - name: generate-repo-src-sbom
      image: quay.io/redhat-appstudio/syft:v0.94.0
      script: |
        syft dir:$(workspaces.source.path) --output cyclonedx-json=$(workspaces.source.path)/source-sbom.json
        echo "Generated: $(workspaces.source.path)/source-sbom.json"

    - name: generate-image-sbom
      image: quay.io/redhat-appstudio/syft:v0.94.0
      script: |
        syft oci-archive:$(workspaces.source.path)/image.tar --scope all-layers -o cyclonedx-json=$(workspaces.source.path)/image-sbom.json
        echo "Generated: $(workspaces.source.path)/image-sbom.json"

    - name: merge-repo-image-sboms
      image: cyclonedx/cyclonedx-cli:0.25.0
      script: |
        cyclonedx merge \
          --input-files \
            $(workspaces.source.path)/source-sbom.json \
            $(workspaces.source.path)/image-sbom.json \
            $(workspaces.source.path)/bom.json \
          --output-file $(workspaces.source.path)/cyclonedx-sbom.json \
        && echo "Generated: $(workspaces.source.path)/cyclonedx-sbom.json"

    ## Processes data from a CycloneDX-format Software Bill of Materials (SBOM). 
    ## Extracts Package URLs (purls) from each component listed in the CycloneDX 
    ## SBOM and then organize these purls into a new JSON structure.
    - name: generate-purls-sbom
      image: registry.access.redhat.com/ubi9/python-311:latest
      script: |
        #!/bin/python3
        import json

        with open("$(workspaces.source.path)/cyclonedx-sbom.json") as f:
          cyclonedx_sbom = json.load(f)

        purls = [{"purl": component["purl"]} for component in cyclonedx_sbom.get("components", []) if "purl" in component]
        purl_content = {"image_contents": {"dependencies": purls}}

        with open("$(workspaces.source.path)/purl-sbom.json", "w") as output_file:
          json.dump(purl_content, output_file, indent=4)
        
        print("Generated: $(workspaces.source.path)/purl-sbom.json")

    ## Cachi2 is a CLI tool designed specifically to pre-fetch your project's dependencies, 
    ## which is particularly useful for making your build process hermetic.
    ## encourages or mandates best practices in dependency management, such as building from 
    ## source and avoiding pre-built artifacts like Python wheels.
    ## Cachi2 generates a manifest of all dependencies fetched, aiding in audits and compliance checks.
    ## To be hermetic we need to add network security policies that denies by default egress and ingress.
    ## Base images should be pulled into the internal registry
    ## Stage and Update: Set up a secure, isolated staging environment where base images are downloaded and updated (e.g., running yum update -y). This environment should have restricted internet access, used only for fetching updates.
    ## Security Scanning: After updating, thoroughly scan the images for vulnerabilities using security tools. Only images that pass all security checks should be moved to your internal registry.
    ## Promotion to Internal Registry: Once validated, promote the updated images to your internal registry from where they can be safely used in production builds without additional external access.
    - name: generate-cachi2-sbom
      image: quay.io/redhat-appstudio/cachi2:0.3.0@sha256:46097f22b57e4d48a3fce96d931e08ccfe3a3e6421362d5f9353961279078eef
      script: |
        echo "generate"
        # if [ -n "${PREFETCH_INPUT}" ]; then
        #   echo "Merging contents of sbom-cachi2.json into sbom-cyclonedx.json"
        #   /src/utils/merge_syft_sbom.py sbom-cachi2.json sbom-cyclonedx.json > sbom-temp.json
        #   mv sbom-temp.json sbom-cyclonedx.json
        # else
        #   echo "Skipping step since no Cachi2 SBOM was produced"
        # fi
